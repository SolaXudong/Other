<?xml version="1.0" encoding="UTF-8"?>
<!-- 参考：https://www.ktanx.com/blog/p/5035 -->
<!-- 根节点，一般有三个属性，scan(是否自动加载，默认true)，scanPeriod(监听修改时间间隔，默认一分钟)，debug(是否查看logback运行状态，默认true) -->
<configuration scan="true" scanPeriod="60 seconds"
	debug="false">

	<!-- 定义日志文件的存储地址 勿在LogBack的配置中使用相对路径(会在项目同级目录下自动生成，无需手动创建) -->
	<property name="LOG_HOME" value="logs"></property>

	<!-- 定义控制台输出数据格式(%d输出时间格式SSS毫秒，%thread=%t输出线程名称，%-5level=%-5p字符宽度，%logger=%c，%msg=%m输出信息，%n换行) -->
	<property name="CONSOLE_PATTERN"
		value="%d{yyyy-MM-dd HH:mm:ss} [%t] %-5p %c - %m%n" />
	<!-- 定义文件输出数据格式 -->
	<property name="FILE_PATTERN"
		value="%d{yyyy-MM-dd HH:mm:ss} [%t] %-5p %c - %m%n" />

	<!-- 输出到控制台，一个appender定义一种输出策略(负责写日志的组件，name自定义名称，class全限定名即日志输出方式) -->
	<appender name="STDOUT"
		class="ch.qos.logback.core.ConsoleAppender">
		<!-- filter中定义要输出的日志级别，例如：输出INFO级别以上的日志，默认是INFO -->
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>INFO</level>
		</filter>
		<!-- 日志输出编码格式化 -->
		<encoder>
			<charset>UTF-8</charset>
			<pattern>${CONSOLE_PATTERN}</pattern>
		</encoder>
	</appender>

	<!-- 输出到文件info -->
	<appender name="INFO_FILE"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- <Prudent>true</Prudent> -->
		<!-- 如果只是想要Info级别的日志，只是过滤info还是会输出Error日志，因为Error的级别高，所以我们使用下面的策略，可以避免输出Error的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<!-- 过滤其他只留info -->
			<level>INFO</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<!-- 滚动策略，按照时间滚动TimeBasedRollingPolicy每天会生成一个日志文件 -->
		<rollingPolicy
			class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<!-- (必要的节点，一般用于指定日志的文件的路径以及生成格式) -->
			<fileNamePattern>${LOG_HOME}/info-%d{yyyy-MM-dd}.%i.log
			</fileNamePattern>
			<!-- (单个日志文件最大值，达到之后就进行切割) -->
			<maxFileSize>10MB</maxFileSize>
			<!-- (日志文件最多保留的天数，也就是过期时间) -->
			<maxHistory>31</maxHistory>
			<!-- 用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志(日志文件总体的最大值，达到之后就不再产生日志) -->
			<totalSizeCap>10GB</totalSizeCap>
		</rollingPolicy>
		<!-- 追加记录 -->
		<append>true</append>
		<!-- 展示格式 layout(单独配置) -->
		<!-- <layout class="ch.qos.logback.classic.PatternLayout"> -->
		<!-- <Pattern>%d{yyyy-MM-dd HH:mm:ss} [%t] %-5p %c- %m%n</Pattern> -->
		<!-- </layout> -->
		<encoder>
			<charset>UTF-8</charset>
			<pattern>${CONSOLE_PATTERN}</pattern>
		</encoder>
	</appender>

	<!--输出到文件error -->
	<appender name="ERROR_FILE"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<rollingPolicy
			class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<fileNamePattern>${LOG_HOME}/error-%d{yyyy-MM-dd}.%i.log
			</fileNamePattern>
			<maxFileSize>10MB</maxFileSize>
			<maxHistory>31</maxHistory>
			<totalSizeCap>10GB</totalSizeCap>
		</rollingPolicy>
		<append>true</append>
		<encoder>
			<charset>UTF-8</charset>
			<pattern>${CONSOLE_PATTERN}</pattern>
		</encoder>
	</appender>

	<!-- 简单使用 -->
	<!-- root节点指定主日志的级别(用类进行输出的日志，LoggerFactory.getLogger(TT.class)) -->
	<!-- <root level="DEBUG"> -->
	<!-- <appender-ref ref="STDOUT" /> -->
	<!-- <appender-ref ref="INFO_FILE" /> -->
	<!-- <appender-ref ref="ERROR_FILE" /> -->
	<!-- </root> -->

	<!-- 开发环境 -->
	<springProfile name="dev">
		<!-- 必选节点，用来指定最基础的日志输出级别(additivity表示是否在控制台打印该日志)(INFO)(DEBUG) -->
		<root level="INFO" additivity="true">
			<appender-ref ref="STDOUT" />
			<appender-ref ref="INFO_FILE" />
			<appender-ref ref="ERROR_FILE" />
		</root>
	</springProfile>

	<!-- logger节点指定自定义日志的级别(自定义的级别，LoggerFactory.getLogger("oneInfo")) -->
	<!-- <logger name="oneInfo" level="WARN" additivity="false"> -->
	<!-- <appender-ref ref="ONE_INFO" /> -->
	<!-- </logger> -->

</configuration>
